{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf390
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww18460\viewh13520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 """Spelling Corrector.\
Copyright 2007 Peter Norvig. \
Open source code under MIT license: http://www.opensource.org/licenses/mit-license.php\
"""\
import re, collections\
\
def words(text): return re.findall('[a-z]+', text.lower()) \
\
def train(features):\
    model = collections.defaultdict(lambda: 1)\
    for f in features:\
        model[f] += 1\
    return model\
\
NWORDS = train(words(file('big.txt').read()))\
\
alphabet = 'abcdefghijklmnopqrstuvwxyz'\
\
def edits1(word):\
   s = [(word[:i], word[i:]) for i in range(len(word) + 1)]\
   deletes    = [a + b[1:] for a, b in s if b]\
   transposes = [a + b[1] + b[0] + b[2:] for a, b in s if len(b)>1]\
   replaces   = [a + c + b[1:] for a, b in s for c in alphabet if b]\
   inserts    = [a + c + b     for a, b in s for c in alphabet]\
   return set(deletes + transposes + replaces + inserts)\
\
def known_edits2(word):\
    return set(e2 for e1 in edits1(word) for e2 in edits1(e1) if e2 in NWORDS)\
\
def known(words): return set(w for w in words if w in NWORDS)\
\
def correct(word):\
    candidates = known([word]) or known(edits1(word)) or known_edits2(word) or [word]\
    return max(candidates, key=NWORDS.get)\
\
##############\
\
Bayes' Theorem:\

\f1 {{\NeXTGraphic Pasted Graphic.tiff \width4320 \height960
}¬}}